// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Property extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Property entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Property must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Property", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Property | null {
    return changetype<Property | null>(store.get_in_block("Property", id));
  }

  static load(id: string): Property | null {
    return changetype<Property | null>(store.get("Property", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get propertyHash(): string {
    let value = this.get("propertyHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set propertyHash(value: string) {
    this.set("propertyHash", Value.fromString(value));
  }

  get dataGroupHash(): string {
    let value = this.get("dataGroupHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set dataGroupHash(value: string) {
    this.set("dataGroupHash", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get submitter(): string {
    let value = this.get("submitter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set submitter(value: string) {
    this.set("submitter", Value.fromString(value));
  }

  get dataHash(): string {
    let value = this.get("dataHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set dataHash(value: string) {
    this.set("dataHash", Value.fromString(value));
  }

  get dataContent(): string | null {
    let value = this.get("dataContent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dataContent(value: string | null) {
    if (!value) {
      this.unset("dataContent");
    } else {
      this.set("dataContent", Value.fromString(<string>value));
    }
  }

  get label(): string | null {
    let value = this.get("label");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set label(value: string | null) {
    if (!value) {
      this.unset("label");
    } else {
      this.set("label", Value.fromString(<string>value));
    }
  }

  get county(): string | null {
    let value = this.get("county");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set county(value: string | null) {
    if (!value) {
      this.unset("county");
    } else {
      this.set("county", Value.fromString(<string>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }
}

export class PropertyLabelPair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PropertyLabelPair entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PropertyLabelPair must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PropertyLabelPair", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PropertyLabelPair | null {
    return changetype<PropertyLabelPair | null>(
      store.get_in_block("PropertyLabelPair", id),
    );
  }

  static load(id: string): PropertyLabelPair | null {
    return changetype<PropertyLabelPair | null>(
      store.get("PropertyLabelPair", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get propertyHash(): string {
    let value = this.get("propertyHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set propertyHash(value: string) {
    this.set("propertyHash", Value.fromString(value));
  }

  get label(): string {
    let value = this.get("label");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set label(value: string) {
    this.set("label", Value.fromString(value));
  }

  get firstSeenTimestamp(): BigInt {
    let value = this.get("firstSeenTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstSeenTimestamp(value: BigInt) {
    this.set("firstSeenTimestamp", Value.fromBigInt(value));
  }

  get firstSeenBlockNumber(): BigInt {
    let value = this.get("firstSeenBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstSeenBlockNumber(value: BigInt) {
    this.set("firstSeenBlockNumber", Value.fromBigInt(value));
  }
}

export class LabelCounter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LabelCounter entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LabelCounter must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("LabelCounter", id.toString(), this);
    }
  }

  static loadInBlock(id: string): LabelCounter | null {
    return changetype<LabelCounter | null>(
      store.get_in_block("LabelCounter", id),
    );
  }

  static load(id: string): LabelCounter | null {
    return changetype<LabelCounter | null>(store.get("LabelCounter", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get label(): string {
    let value = this.get("label");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set label(value: string) {
    this.set("label", Value.fromString(value));
  }

  get uniquePropertyCount(): i32 {
    let value = this.get("uniquePropertyCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set uniquePropertyCount(value: i32) {
    this.set("uniquePropertyCount", Value.fromI32(value));
  }
}

export class PropertySubmitterPair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save PropertySubmitterPair entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PropertySubmitterPair must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PropertySubmitterPair", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PropertySubmitterPair | null {
    return changetype<PropertySubmitterPair | null>(
      store.get_in_block("PropertySubmitterPair", id),
    );
  }

  static load(id: string): PropertySubmitterPair | null {
    return changetype<PropertySubmitterPair | null>(
      store.get("PropertySubmitterPair", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get propertyHash(): string {
    let value = this.get("propertyHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set propertyHash(value: string) {
    this.set("propertyHash", Value.fromString(value));
  }

  get submitter(): string {
    let value = this.get("submitter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set submitter(value: string) {
    this.set("submitter", Value.fromString(value));
  }

  get label(): string {
    let value = this.get("label");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set label(value: string) {
    this.set("label", Value.fromString(value));
  }

  get firstSeenTimestamp(): BigInt {
    let value = this.get("firstSeenTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstSeenTimestamp(value: BigInt) {
    this.set("firstSeenTimestamp", Value.fromBigInt(value));
  }

  get firstSeenBlockNumber(): BigInt {
    let value = this.get("firstSeenBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstSeenBlockNumber(value: BigInt) {
    this.set("firstSeenBlockNumber", Value.fromBigInt(value));
  }
}

export class SubmitterLabelCounter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save SubmitterLabelCounter entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SubmitterLabelCounter must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("SubmitterLabelCounter", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SubmitterLabelCounter | null {
    return changetype<SubmitterLabelCounter | null>(
      store.get_in_block("SubmitterLabelCounter", id),
    );
  }

  static load(id: string): SubmitterLabelCounter | null {
    return changetype<SubmitterLabelCounter | null>(
      store.get("SubmitterLabelCounter", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get submitter(): string {
    let value = this.get("submitter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set submitter(value: string) {
    this.set("submitter", Value.fromString(value));
  }

  get label(): string {
    let value = this.get("label");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set label(value: string) {
    this.set("label", Value.fromString(value));
  }

  get uniquePropertyCount(): i32 {
    let value = this.get("uniquePropertyCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set uniquePropertyCount(value: i32) {
    this.set("uniquePropertyCount", Value.fromI32(value));
  }
}

export class SubmitterCountyPair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SubmitterCountyPair entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SubmitterCountyPair must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("SubmitterCountyPair", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SubmitterCountyPair | null {
    return changetype<SubmitterCountyPair | null>(
      store.get_in_block("SubmitterCountyPair", id),
    );
  }

  static load(id: string): SubmitterCountyPair | null {
    return changetype<SubmitterCountyPair | null>(
      store.get("SubmitterCountyPair", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get submitter(): string {
    let value = this.get("submitter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set submitter(value: string) {
    this.set("submitter", Value.fromString(value));
  }

  get county(): string {
    let value = this.get("county");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set county(value: string) {
    this.set("county", Value.fromString(value));
  }

  get firstSeenTimestamp(): BigInt {
    let value = this.get("firstSeenTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstSeenTimestamp(value: BigInt) {
    this.set("firstSeenTimestamp", Value.fromBigInt(value));
  }

  get firstSeenBlockNumber(): BigInt {
    let value = this.get("firstSeenBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstSeenBlockNumber(value: BigInt) {
    this.set("firstSeenBlockNumber", Value.fromBigInt(value));
  }
}

export class SubmitterCountyLabelPair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save SubmitterCountyLabelPair entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SubmitterCountyLabelPair must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("SubmitterCountyLabelPair", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SubmitterCountyLabelPair | null {
    return changetype<SubmitterCountyLabelPair | null>(
      store.get_in_block("SubmitterCountyLabelPair", id),
    );
  }

  static load(id: string): SubmitterCountyLabelPair | null {
    return changetype<SubmitterCountyLabelPair | null>(
      store.get("SubmitterCountyLabelPair", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get submitter(): string {
    let value = this.get("submitter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set submitter(value: string) {
    this.set("submitter", Value.fromString(value));
  }

  get county(): string {
    let value = this.get("county");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set county(value: string) {
    this.set("county", Value.fromString(value));
  }

  get label(): string {
    let value = this.get("label");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set label(value: string) {
    this.set("label", Value.fromString(value));
  }

  get firstSeenTimestamp(): BigInt {
    let value = this.get("firstSeenTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstSeenTimestamp(value: BigInt) {
    this.set("firstSeenTimestamp", Value.fromBigInt(value));
  }

  get firstSeenBlockNumber(): BigInt {
    let value = this.get("firstSeenBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstSeenBlockNumber(value: BigInt) {
    this.set("firstSeenBlockNumber", Value.fromBigInt(value));
  }
}

export class SubmitterCountyCounter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save SubmitterCountyCounter entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SubmitterCountyCounter must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("SubmitterCountyCounter", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SubmitterCountyCounter | null {
    return changetype<SubmitterCountyCounter | null>(
      store.get_in_block("SubmitterCountyCounter", id),
    );
  }

  static load(id: string): SubmitterCountyCounter | null {
    return changetype<SubmitterCountyCounter | null>(
      store.get("SubmitterCountyCounter", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get submitter(): string {
    let value = this.get("submitter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set submitter(value: string) {
    this.set("submitter", Value.fromString(value));
  }

  get uniqueCounties(): Array<string> {
    let value = this.get("uniqueCounties");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set uniqueCounties(value: Array<string>) {
    this.set("uniqueCounties", Value.fromStringArray(value));
  }

  get uniqueCountyCount(): i32 {
    let value = this.get("uniqueCountyCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set uniqueCountyCount(value: i32) {
    this.set("uniqueCountyCount", Value.fromI32(value));
  }

  get totalPropertiesMined(): i32 {
    let value = this.get("totalPropertiesMined");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalPropertiesMined(value: i32) {
    this.set("totalPropertiesMined", Value.fromI32(value));
  }

  get lastActivityTimestamp(): BigInt {
    let value = this.get("lastActivityTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastActivityTimestamp(value: BigInt) {
    this.set("lastActivityTimestamp", Value.fromBigInt(value));
  }

  get lastActivityBlockNumber(): BigInt {
    let value = this.get("lastActivityBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastActivityBlockNumber(value: BigInt) {
    this.set("lastActivityBlockNumber", Value.fromBigInt(value));
  }

  get propertiesPerSecond(): BigDecimal {
    let value = this.get("propertiesPerSecond");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set propertiesPerSecond(value: BigDecimal) {
    this.set("propertiesPerSecond", Value.fromBigDecimal(value));
  }

  get firstActivityTimestamp(): BigInt {
    let value = this.get("firstActivityTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstActivityTimestamp(value: BigInt) {
    this.set("firstActivityTimestamp", Value.fromBigInt(value));
  }
}

export class SubmitterCountyLabelCounter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save SubmitterCountyLabelCounter entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SubmitterCountyLabelCounter must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("SubmitterCountyLabelCounter", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SubmitterCountyLabelCounter | null {
    return changetype<SubmitterCountyLabelCounter | null>(
      store.get_in_block("SubmitterCountyLabelCounter", id),
    );
  }

  static load(id: string): SubmitterCountyLabelCounter | null {
    return changetype<SubmitterCountyLabelCounter | null>(
      store.get("SubmitterCountyLabelCounter", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get submitter(): string {
    let value = this.get("submitter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set submitter(value: string) {
    this.set("submitter", Value.fromString(value));
  }

  get county(): string {
    let value = this.get("county");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set county(value: string) {
    this.set("county", Value.fromString(value));
  }

  get label(): string {
    let value = this.get("label");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set label(value: string) {
    this.set("label", Value.fromString(value));
  }

  get propertiesMined(): i32 {
    let value = this.get("propertiesMined");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set propertiesMined(value: i32) {
    this.set("propertiesMined", Value.fromI32(value));
  }

  get lastActivityTimestamp(): BigInt {
    let value = this.get("lastActivityTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastActivityTimestamp(value: BigInt) {
    this.set("lastActivityTimestamp", Value.fromBigInt(value));
  }

  get lastActivityBlockNumber(): BigInt {
    let value = this.get("lastActivityBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastActivityBlockNumber(value: BigInt) {
    this.set("lastActivityBlockNumber", Value.fromBigInt(value));
  }
}

export class CountyCounter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CountyCounter entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CountyCounter must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CountyCounter", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CountyCounter | null {
    return changetype<CountyCounter | null>(
      store.get_in_block("CountyCounter", id),
    );
  }

  static load(id: string): CountyCounter | null {
    return changetype<CountyCounter | null>(store.get("CountyCounter", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get county(): string {
    let value = this.get("county");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set county(value: string) {
    this.set("county", Value.fromString(value));
  }

  get uniquePropertiesCount(): i32 {
    let value = this.get("uniquePropertiesCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set uniquePropertiesCount(value: i32) {
    this.set("uniquePropertiesCount", Value.fromI32(value));
  }
}
