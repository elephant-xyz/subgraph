// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class DataSubmitted extends ethereum.Event {
  get params(): DataSubmitted__Params {
    return new DataSubmitted__Params(this);
  }
}

export class DataSubmitted__Params {
  _event: DataSubmitted;

  constructor(event: DataSubmitted) {
    this._event = event;
  }

  get propertyHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get dataGroupHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get submitter(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get dataHash(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class DataGroupConsensusUpdated extends ethereum.Event {
  get params(): DataGroupConsensusUpdated__Params {
    return new DataGroupConsensusUpdated__Params(this);
  }
}

export class DataGroupConsensusUpdated__Params {
  _event: DataGroupConsensusUpdated;

  constructor(event: DataGroupConsensusUpdated) {
    this._event = event;
  }

  get dataGroupHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get oldValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DataGroupHeartBeat extends ethereum.Event {
  get params(): DataGroupHeartBeat__Params {
    return new DataGroupHeartBeat__Params(this);
  }
}

export class DataGroupHeartBeat__Params {
  _event: DataGroupHeartBeat;

  constructor(event: DataGroupHeartBeat) {
    this._event = event;
  }

  get propertyHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get dataGroupHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get dataHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get submitter(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class MinimumConsensusUpdated extends ethereum.Event {
  get params(): MinimumConsensusUpdated__Params {
    return new MinimumConsensusUpdated__Params(this);
  }
}

export class MinimumConsensusUpdated__Params {
  _event: MinimumConsensusUpdated;

  constructor(event: MinimumConsensusUpdated) {
    this._event = event;
  }

  get oldValue(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PropertyDataConsensus extends ethereum.SmartContract {
  static bind(address: Address): PropertyDataConsensus {
    return new PropertyDataConsensus("PropertyDataConsensus", address);
  }

  getCurrentFieldDataHash(propertyHash: Bytes, dataGroupHash: Bytes): Bytes {
    let result = super.call(
      "getCurrentFieldDataHash",
      "getCurrentFieldDataHash(bytes32,bytes32):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(propertyHash),
        ethereum.Value.fromFixedBytes(dataGroupHash),
      ],
    );

    return result[0].toBytes();
  }

  try_getCurrentFieldDataHash(
    propertyHash: Bytes,
    dataGroupHash: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getCurrentFieldDataHash",
      "getCurrentFieldDataHash(bytes32,bytes32):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(propertyHash),
        ethereum.Value.fromFixedBytes(dataGroupHash),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get initialAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class SubmitDataCall extends ethereum.Call {
  get inputs(): SubmitDataCall__Inputs {
    return new SubmitDataCall__Inputs(this);
  }

  get outputs(): SubmitDataCall__Outputs {
    return new SubmitDataCall__Outputs(this);
  }
}

export class SubmitDataCall__Inputs {
  _call: SubmitDataCall;

  constructor(call: SubmitDataCall) {
    this._call = call;
  }

  get propertyHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get dataGroupHash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get dataHash(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SubmitDataCall__Outputs {
  _call: SubmitDataCall;

  constructor(call: SubmitDataCall) {
    this._call = call;
  }
}

export class SubmitBatchDataCall extends ethereum.Call {
  get inputs(): SubmitBatchDataCall__Inputs {
    return new SubmitBatchDataCall__Inputs(this);
  }

  get outputs(): SubmitBatchDataCall__Outputs {
    return new SubmitBatchDataCall__Outputs(this);
  }
}

export class SubmitBatchDataCall__Inputs {
  _call: SubmitBatchDataCall;

  constructor(call: SubmitBatchDataCall) {
    this._call = call;
  }

  get items(): Array<SubmitBatchDataCallItemsStruct> {
    return this._call.inputValues[0].value.toTupleArray<SubmitBatchDataCallItemsStruct>();
  }
}

export class SubmitBatchDataCall__Outputs {
  _call: SubmitBatchDataCall;

  constructor(call: SubmitBatchDataCall) {
    this._call = call;
  }
}

export class SubmitBatchDataCallItemsStruct extends ethereum.Tuple {
  get propertyHash(): Bytes {
    return this[0].toBytes();
  }

  get dataGroupHash(): Bytes {
    return this[1].toBytes();
  }

  get dataHash(): Bytes {
    return this[2].toBytes();
  }
}
